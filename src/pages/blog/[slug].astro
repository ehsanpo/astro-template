---
import Layout from "../../layouts/Layout.astro";
import { getBlogPosts } from "../../utils/data";

export async function getStaticPaths() {
  const blogPosts = await getBlogPosts();
  return blogPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

interface BlogPost {
  title: string;
  description?: string;
  date: string;
  author?: string;
  category?: string[];
  tag?: string[];
  cover?: {
    height: number;
    width: number;
    src: string;
  };
  featured?: boolean;
  content: any;
  slug: string;
}

const { post } = Astro.props as unknown as { post: BlogPost };
const { Content } = await post.content.render();

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};
---

<Layout title={`${post.title} - Blog`}>
  <article class="min-h-screen bg-white dark:bg-neutral-900 pt-4">
    <div class="max-w-4xl mx-auto px-4 py-16">
      {
        post.cover && (
          <div class="mb-8 rounded-lg overflow-hidden">
            <img
              src={post.cover.src}
              alt={post.title}
              class="w-full h-64 md:h-96 object-cover"
            />
          </div>
        )
      }

      <header class="mb-12 text-center">
        <h1
          class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6"
        >
          {post.title}
        </h1>

        {
          post.description && (
            <p class="text-xl text-gray-600 dark:text-gray-400 mb-6 max-w-3xl mx-auto">
              {post.description}
            </p>
          )
        }

        <div
          class="flex flex-wrap items-center justify-center gap-4 text-sm text-gray-500 dark:text-gray-400"
        >
          <time datetime={post.date}>
            {formatDate(post.date)}
          </time>

          {
            post.author && (
              <>
                <span>•</span>
                <span>By {post.author}</span>
              </>
            )
          }

          {
            post.category && post.category.length > 0 && (
              <>
                <span>•</span>
                <div class="flex flex-wrap gap-2">
                  {post.category.map((cat) => (
                    <span class="px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-md text-xs">
                      {cat}
                    </span>
                  ))}
                </div>
              </>
            )
          }
        </div>
      </header>

      <div class="prose prose-base dark:prose-invert max-w-none">
        <Content />
      </div>

      {
        post.tag && post.tag.length > 0 && (
          <footer class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
            <div class="flex flex-wrap gap-2">
              <span class="text-sm text-gray-500 dark:text-gray-400 mr-2">
                Tags:
              </span>
              {post.tag.map((tag) => (
                <span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-sm">
                  #{tag}
                </span>
              ))}
            </div>
          </footer>
        )
      }

      <div class="text-center mt-16">
        <a
          href="/blog"
          class="inline-flex items-center px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors"
        >
          <svg
            class="w-4 h-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Back to Blog
        </a>
      </div>
    </div>
  </article>
</Layout>
